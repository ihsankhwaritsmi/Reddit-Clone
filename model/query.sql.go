// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package model

import (
	"context"
	"database/sql"
)

const authenticateUser = `-- name: AuthenticateUser :one
SELECT UserID, UserUsername, UserEmail, UserPassword
FROM Users
WHERE UserUsername = ?
AND UserPassword = ?
`

type AuthenticateUserParams struct {
	Userusername string
	Userpassword string
}

func (q *Queries) AuthenticateUser(ctx context.Context, arg AuthenticateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, authenticateUser, arg.Userusername, arg.Userpassword)
	var i User
	err := row.Scan(
		&i.Userid,
		&i.Userusername,
		&i.Useremail,
		&i.Userpassword,
	)
	return i, err
}

const createUser = `-- name: CreateUser :execresult
INSERT INTO Users (UserUsername, UserEmail, UserPassword)
VALUES (?, ?, ?)
`

type CreateUserParams struct {
	Userusername string
	Useremail    string
	Userpassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser, arg.Userusername, arg.Useremail, arg.Userpassword)
}

const getAllPosts = `-- name: GetAllPosts :many
SELECT 
    PostID, 
    PostTitle, 
    PostBody,
    UserUsername
FROM Posts
JOIN Users
ON Posts.Users_UserID = Users.UserID
ORDER BY created_at DESC
`

type GetAllPostsRow struct {
	Postid       int64
	Posttitle    string
	Postbody     string
	Userusername string
}

func (q *Queries) GetAllPosts(ctx context.Context) ([]GetAllPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPostsRow
	for rows.Next() {
		var i GetAllPostsRow
		if err := rows.Scan(
			&i.Postid,
			&i.Posttitle,
			&i.Postbody,
			&i.Userusername,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT UserID, UserUsername, UserEmail
FROM Users
WHERE UserID = ?
`

type GetUserRow struct {
	Userid       int64
	Userusername string
	Useremail    string
}

func (q *Queries) GetUser(ctx context.Context, userid int64) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, userid)
	var i GetUserRow
	err := row.Scan(&i.Userid, &i.Userusername, &i.Useremail)
	return i, err
}

const getUserPosts = `-- name: GetUserPosts :many
SELECT 
    PostID, 
    PostTitle, 
    PostBody,
    UserUsername
FROM Posts
JOIN Users
ON Posts.Users_UserID = Users.UserID
WHERE Users_UserID = ?
`

type GetUserPostsRow struct {
	Postid       int64
	Posttitle    string
	Postbody     string
	Userusername string
}

func (q *Queries) GetUserPosts(ctx context.Context, usersUserid int64) ([]GetUserPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserPosts, usersUserid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserPostsRow
	for rows.Next() {
		var i GetUserPostsRow
		if err := rows.Scan(
			&i.Postid,
			&i.Posttitle,
			&i.Postbody,
			&i.Userusername,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
